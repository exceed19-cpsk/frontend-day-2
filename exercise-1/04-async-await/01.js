/*

ในข้อหัวนี้เราจะไปดูในเรื่องของการใช้ async await กัน แต่ก่อนหน้านี้
จะขอเกริ่นความเข้าใจเบื้องต้นเพื่อให้น้องๆกันก่อน สำหรับ javascript นั้นจะมีการทำงานแบบ
asynchronous คือมีการทำงานแบบเบื้องหลัง ก็คือจะไม่ทำงานเรียงตามลำดับของการเขียนโค้ด

*/

/* ตัวอย่างเช่น */
setTimeout(() => console.log("Hello Javascript"),1)
console.log("Hello Python")

/* 

ถ้าน้องลองรันดูจะพบว่า "Hello Python" แสดงขึ้นมาก่อน "Hello Javascript"
การทำงานแบบนี้จะเกิดขึ้นได้บ่อยในการเขียน javascript 

ทำไมมันถึงต้องมีการทำงานแบบนี้ เพราะว่าภาษา javascript นั้นจะมีการทำงานที่ใช้เวลานานซึ่งเราไม่รู้ว่า
การทำงานจะเสร็จเมื่อไหร่ ดังนั้นจึงเอาเวลาที่รอนั้นไปทำงานคำสั่งอื่นๆที่จำเป็นก่อน แล้วค่อยกลับดูผลลัพธ์จาก
การทำงานที่ต้องรอ เราเรียกแบบที่ว่า "การทำงานแบบเบื้องหลัง" นั่นเองงับ

*/

/* 

ต่อมาเราจะมาดูการทำงานที่สำคัญต่อ โดยในภาษา javascript นั้นจะมีการใช้
method ที่ชื่อว่า fetch หรือ axios ซึ่งทำหน้าที่ในการรับส่งข้อมูลระหว่างเพจที่แสดงผลทางฝั่งบราวเซอร์
กับทางฝั่งเซิฟเวอร์ โดยฝั่งบราวเซอร์จะส่งข้อมูลบางอย่างไปหาฝั่งเซิฟเวอร์เพื่อประมวลผล และจากนั้นฝั่งเซิฟเวอร์
ก็จะส่งผลลัพธ์กลับคืนมา ซึ่งผลลัพธที่ได้กลับมา เราจะเรียกมันว่า "promise"

*** [บรรทัดนี้สำคัญนะงับ]
เนื่องด้วยข้อจำกัดในด้านเวลา จึงขอให้น้องๆจำไว้เลยว่าเมื่อใช้คำสั่ง fetch หรือ axios จะได้ค่ากลับมาเป็น promise ทุกครั้ง
แล้ว promise ก็ทำงานแบบ asynchronous เช่นกันดังที่กล่าวไป โดย promise ที่คืนกลับมานั้นอาจะอยู่ในสถานะที่ทำงานสำเร็จ 
หรือล้มเหลวก็ได้

*/